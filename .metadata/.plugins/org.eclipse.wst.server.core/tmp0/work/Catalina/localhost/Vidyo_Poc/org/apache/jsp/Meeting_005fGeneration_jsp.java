/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.20
 * Generated at: 2018-12-10 06:51:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Meeting_005fGeneration_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <title>Vidyo Sample</title>\r\n");
      out.write("  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("  <script>\r\n");
      out.write("  var vidyoConnector;\r\n");
      out.write("\r\n");
      out.write("   // Callback method when VidyoIO is done loading (pointer to this method is passed in the onload parameter while including the\r\n");
      out.write("   // VidyoClient.js file)\r\n");
      out.write("    function onVidyoClientLoaded(status) {\r\n");
      out.write("      console.log(\"VidyoClient load state - \" + status.state);\r\n");
      out.write("      if (status.state == \"READY\") {\r\n");
      out.write("        VC.CreateVidyoConnector({\r\n");
      out.write("          viewId:\"renderer\", // Div ID where the composited video will be rendered, see VidyoConnector.html;\r\n");
      out.write("          viewStyle:\"VIDYO_CONNECTORVIEWSTYLE_Default\", // Visual style of the composited renderer\r\n");
      out.write("          remoteParticipants:10, // Maximum number of participants to render\r\n");
      out.write("          logFileFilter:\"error\",\r\n");
      out.write("          logFileName:\"\",\r\n");
      out.write("          userData:\"\"\r\n");
      out.write("        }).then(function (vc) {\r\n");
      out.write("          console.log(\"Create success\");\r\n");
      out.write("          vidyoConnector = vc;\r\n");
      out.write("        }).catch(function(error){\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("    function joinCall(){\r\n");
      out.write("      // To join a video conference call Connect method\r\n");
      out.write("      vidyoConnector.Connect({\r\n");
      out.write("        host:\"prod.vidyo.io\",  // Server name, for most production apps it will be prod.vidyo.io\r\n");
      out.write("        token:value,          // Add generated token (https://developer.vidyo.io/documentation/4-1-16-8/getting-started#Tokens)\r\n");
      out.write("        displayName:\"Sachin\",  // Display name\r\n");
      out.write("        resourceId:\"demoRoom\", // Room name\r\n");
      out.write("        onSuccess: function(){\r\n");
      out.write("          console.log(\"Connected!! YAY!\");\r\n");
      out.write("        },\r\n");
      out.write("        onFailure: function(reason){\r\n");
      out.write("          console.error(\"Connection failed\");\r\n");
      out.write("        },\r\n");
      out.write("        onDisconnected: function(reason) {\r\n");
      out.write("          console.log(\" disconnected - \" + reason);\r\n");
      out.write("        }\r\n");
      out.write("      })\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("  </script>\r\n");
      out.write("  // Including the Vidyo.io package by adding the javascript path.\r\n");
      out.write("  <script src=\"https://static.vidyo.io/latest/javascript/VidyoClient/VidyoClient.js?onload=onVidyoClientLoaded\"></script>\r\n");
      out.write(" <h3>Hello Vidyo!</h3>\r\n");
      out.write(" <button onclick=\"joinCall()\">Connect</button>\r\n");
      out.write(" <div id=\"renderer\"></div>\r\n");
      out.write(" \r\n");
      out.write(" <form action=\"Share\" target=\"_blank\">\r\n");
      out.write(" \r\n");
      out.write(" Name:<input type=\"text\" name=\"text1\"></input>\r\n");
      out.write(" <button id=\"rak\" value=\"rak1\" >share</button>\r\n");
      out.write(" </form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
